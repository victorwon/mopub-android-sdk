#!/usr/bin/python

import os
import boto
import re
import boto

import os_helper

BUCKET_NAME = 'mopub-android-sdk'
BASE_FILENAME = 'mopub-android-base-sdk'
FULL_FILENAME = 'mopub-android-full-sdk'
AWS_ID = 'AWS_ACCESS_KEY_ID'
AWS_SECRET = 'AWS_SECRET_ACCESS_KEY'

TEMP_SDK_PATH = TEMP_STAGING_PATH + '/mopub-android-sdk/mopub-sdk'
TEMP_MOPUB_PACKAGE = TEMP_SDK_PATH + '/src/main/java/com/mopub/mobileads'
THIRD_PARTY_LIBS = TEMP_STAGING_PATH + '/mopub-android/libs'
TEMP_BASE_SDK_ZIP_FILE = '/tmp/' + BASE_FILENAME + '.zip'
TEMP_FULL_SDK_ZIP_FILE = '/tmp/' + FULL_FILENAME + '.zip'

release_branch = 'master'
if len(os.sys.argv) > 1:
    release_branch = os.sys.argv[1]

def clone_private_repo():
    print 'Cloning the mopub-android (private) repo'
    os.system('git clone https://github.com/mopub/mopub-android.git')
    os.chdir(TEMP_STAGING_PATH + '/mopub-android')
    if os.system('git checkout ' + release_branch):
        print 'couldn\'t check out' + release_branch
        exit(1)
    os.chdir(TEMP_STAGING_PATH)

def start_sdk_staging():
    os_helper.init_temp_staging()
    print 'Moving to staging path'
    os.chdir(TEMP_STAGING_PATH)

    clone_private_repo()

    print 'Cloning the mopub-android-sdk (public) repo'
    os.system('git clone https://github.com/mopub/mopub-android-sdk.git')
    os.system('rm ' + TEMP_SDK_PATH + '/*.iml')

def create_base_bundle():
    print 'creating base bundle in /tmp'
    start_sdk_staging()
    os.chdir('mopub-android-sdk')
    os.system('zip -FSr ' + TEMP_BASE_SDK_ZIP_FILE + ' ' + 'mopub-sdk')

def update_project_file():
    with open(TEMP_SDK_PATH + '/.classpath', 'r+w') as f:
        lines = list(f)
        lines_to_add = [ jar for jar in os.listdir(THIRD_PARTY_LIBS) if os.path.isfile(os.path.join(THIRD_PARTY_LIBS, jar)) and jar.endswith('.jar') ]
        lines_to_add = [ '\t<classpathentry kind="lib" path="libs/' + l + '"/>\n' for l in lines_to_add ]
        output_lines = lines[:-1] + lines_to_add + lines[-1:]
        f.seek(0)
        f.write(''.join(output_lines))

def create_full_bundle():
    # copy mopub-sdk
    start_sdk_staging()

    # copy custom events from extras
    custom_event_folder = '/mopub-android-sdk/extras/src/com/mopub/mobileads'
    custom_events = ['MillennialBanner.java', 'MillennialInterstitial.java', 'GoogleAdMobBanner.java', 'GoogleAdMobInterstitial.java']

    for custom_event in custom_events:
        os.system('cp ' + TEMP_STAGING_PATH + custom_event_folder + '/' + custom_event + ' ' + TEMP_MOPUB_PACKAGE)

    # copy jars (where do these come from?) into libs
    os.system('mkdir -p ' + TEMP_SDK_PATH + '/libs')
    os.system('cp ' + THIRD_PARTY_LIBS + '/* ' + TEMP_SDK_PATH + '/libs')

    # modify .project file
    update_project_file()

    print 'creating full bundle in /tmp'
    os.chdir('mopub-android-sdk')
    os.system('zip -FSr ' + TEMP_FULL_SDK_ZIP_FILE + ' ' + 'mopub-sdk')

def send_to_s3(bucket, source, destination):
    def get_version_number():
        with open(TEMP_MOPUB_PACKAGE + '/MoPub.java') as f:
            m = re.search('SDK_VERSION = "(.*?)"', f.read())
            return m.group(1)

    def write_file_to_s3(destination):
        print 'adding ' + destination + ' to s3'
        k = boto.s3.key.Key(bucket)
        k.key = destination + '.zip'
        k.set_contents_from_filename(source)
        k.set_acl('public-read')

    destination_with_version = destination + '-v' + get_version_number()

    write_file_to_s3(destination)
    write_file_to_s3(destination_with_version)

# Main script starts here
print 'Building bundles for release: ' + release_branch
create_base_bundle()
create_full_bundle()

print 'secret gpg magic'
os.system('gpg ' + TEMP_STAGING_PATH + '/mopub-android-sdk/script/aws_keys.txt.gpg')
with open(TEMP_STAGING_PATH + '/mopub-android-sdk/script/aws_keys.txt') as f:
    os.environ[AWS_ID] = f.readline().rstrip()
    os.environ[AWS_SECRET] = f.readline().rstrip()
os.system('rm script/aws_keys.txt')

print 'connecting to s3 using boto'
conn = boto.connect_s3()
bucket = conn.create_bucket(BUCKET_NAME)
bucket.set_acl('public-read')

send_to_s3(bucket, TEMP_BASE_SDK_ZIP_FILE, BASE_FILENAME)
send_to_s3(bucket, TEMP_FULL_SDK_ZIP_FILE, FULL_FILENAME)
print 'all done!'
